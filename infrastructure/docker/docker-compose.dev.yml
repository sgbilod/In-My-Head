version: "3.8"

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: inmyhead-postgres
    environment:
      POSTGRES_DB: inmyhead_dev
      POSTGRES_USER: inmyhead
      POSTGRES_PASSWORD: inmyhead_dev_pass_change_in_prod
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inmyhead"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - inmyhead-network

  redis:
    image: redis:7-alpine
    container_name: inmyhead-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - inmyhead-network

  # Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: inmyhead-qdrant
    ports:
      - "6333:6333" # HTTP API
      - "6334:6334" # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - inmyhead-network

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: inmyhead-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    environment:
      MINIO_ROOT_USER: inmyhead
      MINIO_ROOT_PASSWORD: inmyhead_dev_pass_change_in_prod
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - inmyhead-network

  # API Gateway (Node.js)
  api-gateway:
    build:
      context: ../../services/api-gateway
      dockerfile: Dockerfile.dev
    container_name: inmyhead-api-gateway
    ports:
      - "8000:8000"
    volumes:
      - ../../services/api-gateway:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8000
      - POSTGRES_URL=postgresql://inmyhead:inmyhead_dev_pass_change_in_prod@postgres:5432/inmyhead_dev
      - REDIS_URL=redis://redis:6379
      - DOC_PROCESSOR_URL=http://document-processor:8001
      - AI_ENGINE_URL=http://ai-engine:8002
      - SEARCH_SERVICE_URL=http://search-service:8003
      - RESOURCE_MANAGER_URL=http://resource-manager:8004
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    networks:
      - inmyhead-network

  # Document Processor (Python)
  document-processor:
    build:
      context: ../../services/document-processor
      dockerfile: Dockerfile.dev
    container_name: inmyhead-document-processor
    ports:
      - "8001:8001"
    volumes:
      - ../../services/document-processor:/app
      - document_cache:/app/cache
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
      - POSTGRES_URL=postgresql://inmyhead:inmyhead_dev_pass_change_in_prod@postgres:5432/inmyhead_dev
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=inmyhead
      - MINIO_SECRET_KEY=inmyhead_dev_pass_change_in_prod
      - MINIO_SECURE=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn src.main:app --reload --host 0.0.0.0 --port 8001
    networks:
      - inmyhead-network

  # AI Engine (Python)
  ai-engine:
    build:
      context: ../../services/ai-engine
      dockerfile: Dockerfile.dev
    container_name: inmyhead-ai-engine
    ports:
      - "8002:8002"
    volumes:
      - ../../services/ai-engine:/app
      - ai_models:/models
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
      - QDRANT_URL=http://qdrant:6333
      - MODEL_CACHE_DIR=/models
      - REDIS_URL=redis://redis:6379
      # AI Provider API Keys (optional, for external APIs)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn src.main:app --reload --host 0.0.0.0 --port 8002
    networks:
      - inmyhead-network

  # Search Service (Python)
  search-service:
    build:
      context: ../../services/search-service
      dockerfile: Dockerfile.dev
    container_name: inmyhead-search-service
    ports:
      - "8003:8003"
    volumes:
      - ../../services/search-service:/app
      - search_cache:/app/cache
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
      - QDRANT_URL=http://qdrant:6333
      - POSTGRES_URL=postgresql://inmyhead:inmyhead_dev_pass_change_in_prod@postgres:5432/inmyhead_dev
      - REDIS_URL=redis://redis:6379
    depends_on:
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn src.main:app --reload --host 0.0.0.0 --port 8003
    networks:
      - inmyhead-network

  # Resource Manager (Python)
  resource-manager:
    build:
      context: ../../services/resource-manager
      dockerfile: Dockerfile.dev
    container_name: inmyhead-resource-manager
    ports:
      - "8004:8004"
    volumes:
      - ../../services/resource-manager:/app
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
      - POSTGRES_URL=postgresql://inmyhead:inmyhead_dev_pass_change_in_prod@postgres:5432/inmyhead_dev
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn src.main:app --reload --host 0.0.0.0 --port 8004
    networks:
      - inmyhead-network

  # Monitoring (Optional for development)
  prometheus:
    image: prom/prometheus:latest
    container_name: inmyhead-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - inmyhead-network

  grafana:
    image: grafana/grafana:latest
    container_name: inmyhead-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - inmyhead-network

volumes:
  postgres_data:
    name: inmyhead_postgres_data
  redis_data:
    name: inmyhead_redis_data
  qdrant_data:
    name: inmyhead_qdrant_data
  minio_data:
    name: inmyhead_minio_data
  ai_models:
    name: inmyhead_ai_models
  document_cache:
    name: inmyhead_document_cache
  search_cache:
    name: inmyhead_search_cache
  prometheus_data:
    name: inmyhead_prometheus_data
  grafana_data:
    name: inmyhead_grafana_data

networks:
  inmyhead-network:
    name: inmyhead-network
    driver: bridge
