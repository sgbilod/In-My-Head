name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
        paths:
            - "services/document-processor/**"
    pull_request:
        branches: [main, develop]
        paths:
            - "services/document-processor/**"
    workflow_dispatch:

env:
    PYTHON_VERSION: "3.11"
    WORKING_DIR: services/document-processor
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}/document-processor

jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest

        services:
            redis:
                image: redis:7.0-alpine
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            qdrant:
                image: qdrant/qdrant:v1.7.0
                ports:
                    - 6333:6333
                options: >-
                    --health-cmd "wget --spider -q http://localhost:6333/health"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: "pip"

            - name: Install dependencies
              working-directory: ${{ env.WORKING_DIR }}
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest pytest-cov pytest-asyncio

            - name: Run linting
              working-directory: ${{ env.WORKING_DIR }}
              run: |
                  pip install black flake8 mypy
                  black --check src/
                  flake8 src/ --max-line-length=100
                  mypy src/ --ignore-missing-imports

            - name: Run unit tests
              working-directory: ${{ env.WORKING_DIR }}
              env:
                  REDIS_HOST: localhost
                  REDIS_PORT: 6379
                  QDRANT_HOST: localhost
                  QDRANT_PORT: 6333
                  API_KEYS: test-key-123
              run: |
                  pytest test_api.py -v --cov=src --cov-report=xml --cov-report=term

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              with:
                  file: ${{ env.WORKING_DIR }}/coverage.xml
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: false

            - name: Run E2E tests
              working-directory: ${{ env.WORKING_DIR }}
              env:
                  REDIS_HOST: localhost
                  QDRANT_HOST: localhost
                  API_KEYS: test-key-123
              run: |
                  # Start API server in background
                  python -m uvicorn src.app:app --host 0.0.0.0 --port 8000 &
                  sleep 5

                  # Run E2E tests
                  pytest test_e2e.py -v --tb=short

            - name: Run security scan
              working-directory: ${{ env.WORKING_DIR }}
              run: |
                  pip install bandit safety
                  bandit -r src/ -f json -o bandit-report.json
                  safety check --json
              continue-on-error: true

            - name: Upload test artifacts
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results
                  path: |
                      ${{ env.WORKING_DIR }}/coverage.xml
                      ${{ env.WORKING_DIR }}/bandit-report.json

    build:
        name: Build Docker Image
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'push'

        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=sha,prefix={{branch}}-

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: ${{ env.WORKING_DIR }}
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  build-args: |
                      PYTHON_VERSION=${{ env.PYTHON_VERSION }}

            - name: Scan image for vulnerabilities
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
                  format: "sarif"
                  output: "trivy-results.sarif"
              continue-on-error: true

            - name: Upload Trivy results
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: "trivy-results.sarif"
              continue-on-error: true

    performance:
        name: Performance Tests
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        services:
            redis:
                image: redis:7.0-alpine
                ports:
                    - 6379:6379
            qdrant:
                image: qdrant/qdrant:v1.7.0
                ports:
                    - 6333:6333

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              working-directory: ${{ env.WORKING_DIR }}
              run: |
                  pip install -r requirements.txt
                  pip install locust rich

            - name: Start API server
              working-directory: ${{ env.WORKING_DIR }}
              env:
                  REDIS_HOST: localhost
                  QDRANT_HOST: localhost
                  API_KEYS: test-key-123
              run: |
                  python -m uvicorn src.app:app --host 0.0.0.0 --port 8000 &
                  sleep 5

            - name: Run benchmark
              working-directory: ${{ env.WORKING_DIR }}
              env:
                  API_KEY: test-key-123
              run: |
                  python benchmark.py

            - name: Run load test
              working-directory: ${{ env.WORKING_DIR }}
              env:
                  API_KEY: test-key-123
              run: |
                  locust -f load_test.py \
                    --host=http://localhost:8000 \
                    --users 50 \
                    --spawn-rate 5 \
                    --run-time 2m \
                    --headless \
                    --html=load-test-report.html

            - name: Upload performance results
              uses: actions/upload-artifact@v4
              with:
                  name: performance-results
                  path: |
                      ${{ env.WORKING_DIR }}/benchmark_results_*.txt
                      ${{ env.WORKING_DIR }}/load-test-report.html

    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: build
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        environment:
            name: staging
            url: https://staging-api.example.com

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up kubectl
              uses: azure/setup-kubectl@v3

            - name: Configure kubectl
              run: |
                  echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
                  export KUBECONFIG=kubeconfig

            - name: Deploy to staging
              run: |
                  kubectl set image deployment/document-processor-api \
                    api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                    -n document-processing-staging

                  kubectl rollout status deployment/document-processor-api \
                    -n document-processing-staging \
                    --timeout=5m

            - name: Run smoke tests
              run: |
                  sleep 30
                  curl -f https://staging-api.example.com/health || exit 1

    deploy-production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: build
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        environment:
            name: production
            url: https://api.example.com

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up kubectl
              uses: azure/setup-kubectl@v3

            - name: Configure kubectl
              run: |
                  echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
                  export KUBECONFIG=kubeconfig

            - name: Deploy to production
              run: |
                  # Blue-green deployment
                  kubectl set image deployment/document-processor-api \
                    api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                    -n document-processing

                  kubectl rollout status deployment/document-processor-api \
                    -n document-processing \
                    --timeout=10m

            - name: Run health check
              run: |
                  sleep 30
                  curl -f https://api.example.com/health || exit 1

            - name: Notify deployment
              if: success()
              uses: 8398a7/action-slack@v3
              with:
                  status: ${{ job.status }}
                  text: "Deployment to production successful!"
                  webhook_url: ${{ secrets.SLACK_WEBHOOK }}

            - name: Rollback on failure
              if: failure()
              run: |
                  kubectl rollout undo deployment/document-processor-api \
                    -n document-processing

                  # Notify failure
                  curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
                    -H 'Content-Type: application/json' \
                    -d '{"text":"Production deployment failed and rolled back!"}'

    tag-release:
        name: Tag Release
        runs-on: ubuntu-latest
        needs: deploy-production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        permissions:
            contents: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Get version
              id: version
              run: |
                  # Extract version from code or use timestamp
                  VERSION=$(date +%Y.%m.%d.%H%M%S)
                  echo "version=v${VERSION}" >> $GITHUB_OUTPUT

            - name: Create release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ steps.version.outputs.version }}
                  release_name: Release ${{ steps.version.outputs.version }}
                  body: |
                      ## Changes
                      - Automated release from main branch
                      - Commit: ${{ github.sha }}

                      ## Deployment
                      - Staging: ✅ Deployed
                      - Production: ✅ Deployed
                  draft: false
                  prerelease: false

    notify:
        name: Send Notifications
        runs-on: ubuntu-latest
        needs: [test, build, deploy-production]
        if: always()

        steps:
            - name: Notify on Slack
              uses: 8398a7/action-slack@v3
              with:
                  status: custom
                  custom_payload: |
                      {
                        "text": "Pipeline completed",
                        "attachments": [{
                          "color": "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
                          "fields": [
                            {
                              "title": "Tests",
                              "value": "${{ needs.test.result }}",
                              "short": true
                            },
                            {
                              "title": "Build",
                              "value": "${{ needs.build.result }}",
                              "short": true
                            },
                            {
                              "title": "Deploy",
                              "value": "${{ needs.deploy-production.result }}",
                              "short": true
                            },
                            {
                              "title": "Commit",
                              "value": "${{ github.sha }}",
                              "short": false
                            }
                          ]
                        }]
                      }
                  webhook_url: ${{ secrets.SLACK_WEBHOOK }}
