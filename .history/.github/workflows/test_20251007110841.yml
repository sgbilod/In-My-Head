# CI/CD Pipeline - Test Workflow
# Runs tests on pull requests and pushes to main

name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Python Tests
  test-backend:
    name: Backend Tests (Python)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: inmyhead_test
          POSTGRES_USER: inmyhead
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      qdrant:
        image: qdrant/qdrant:v1.7.4
        ports:
          - 6333:6333

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/ai-engine/requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://inmyhead:test_password@localhost:5432/inmyhead_test
        run: |
          python scripts/run_collections_migration.py

      - name: Run AI Engine tests
        env:
          DATABASE_URL: postgresql://inmyhead:test_password@localhost:5432/inmyhead_test
          REDIS_URL: redis://localhost:6379/0
          QDRANT_URL: http://localhost:6333
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cd services/ai-engine
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./services/ai-engine/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Tests
  test-frontend:
    name: Frontend Tests (TypeScript)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/web-interface/package-lock.json

      - name: Install dependencies
        working-directory: frontend/web-interface
        run: npm ci

      - name: Run TypeScript type check
        working-directory: frontend/web-interface
        run: npm run type-check

      - name: Run linter
        working-directory: frontend/web-interface
        run: npm run lint

      - name: Run tests
        working-directory: frontend/web-interface
        run: npm run test -- --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/web-interface/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python linters
        run: |
          pip install black flake8 mypy

      - name: Run Black formatter check
        run: |
          black --check services/

      - name: Run Flake8 linter
        run: |
          flake8 services/ --max-line-length=100

      - name: Run MyPy type checker
        run: |
          mypy services/ai-engine/src --ignore-missing-imports

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python dependency check
        run: |
          pip install safety
          safety check --json

  # Build Docker Images (no push)
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build AI Engine image
        uses: docker/build-push-action@v5
        with:
          context: ./services/ai-engine
          push: false
          tags: inmyhead-ai-engine:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Document Processor image
        uses: docker/build-push-action@v5
        with:
          context: ./services/document-processor
          push: false
          tags: inmyhead-doc-processor:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Search Service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/search-service
          push: false
          tags: inmyhead-search-service:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Notification on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, code-quality, security-scan, build-docker]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Test suite completed"
          echo "Backend: ${{ needs.test-backend.result }}"
          echo "Frontend: ${{ needs.test-frontend.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          echo "Docker Build: ${{ needs.build-docker.result }}"
