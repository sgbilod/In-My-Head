name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Lint and Format Check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - api-gateway
          - document-processor
          - ai-engine
          - search-service
          - resource-manager
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js (for api-gateway)
        if: matrix.service == 'api-gateway'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json
          
      - name: Set up Python (for Python services)
        if: matrix.service != 'api-gateway'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: services/${{ matrix.service }}/requirements.txt
      
      - name: Install dependencies and lint (Node.js)
        if: matrix.service == 'api-gateway'
        run: |
          cd services/${{ matrix.service }}
          npm ci
          npm run lint
      
      - name: Install dependencies and lint (Python)
        if: matrix.service != 'api-gateway'
        run: |
          cd services/${{ matrix.service }}
          pip install -r requirements.txt
          pip install black flake8 mypy
          black --check src/
          flake8 src/
          mypy src/

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: inmyhead_test
          POSTGRES_USER: inmyhead_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        service:
          - api-gateway
          - document-processor
          - ai-engine
          - search-service
          - resource-manager
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js (for api-gateway)
        if: matrix.service == 'api-gateway'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json
      
      - name: Set up Python (for Python services)
        if: matrix.service != 'api-gateway'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: services/${{ matrix.service }}/requirements.txt
      
      - name: Run tests (Node.js)
        if: matrix.service == 'api-gateway'
        run: |
          cd services/${{ matrix.service }}
          npm ci
          npm test -- --coverage --maxWorkers=2
        env:
          POSTGRES_URL: postgresql://inmyhead_test:test_pass@localhost:5432/inmyhead_test
          REDIS_URL: redis://localhost:6379
      
      - name: Run tests (Python)
        if: matrix.service != 'api-gateway'
        run: |
          cd services/${{ matrix.service }}
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
          pytest --cov=src --cov-report=xml --cov-report=term
        env:
          POSTGRES_URL: postgresql://inmyhead_test:test_pass@localhost:5432/inmyhead_test
          REDIS_URL: redis://localhost:6379
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Docker Build Test
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build all Docker images
        run: |
          docker-compose -f infrastructure/docker/docker-compose.dev.yml build
          
      - name: Test Docker Compose services
        run: |
          docker-compose -f infrastructure/docker/docker-compose.dev.yml up -d
          sleep 60
          docker-compose -f infrastructure/docker/docker-compose.dev.yml ps
          docker-compose -f infrastructure/docker/docker-compose.dev.yml logs
          docker-compose -f infrastructure/docker/docker-compose.dev.yml down -v

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: NPM Security Audit
        run: |
          cd services/api-gateway
          npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Python Safety Check
        run: |
          pip install safety
          cd services/document-processor
          safety check -r requirements.txt
        continue-on-error: true

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Start services
        run: |
          docker-compose -f infrastructure/docker/docker-compose.dev.yml up -d
          sleep 90
      
      - name: Run integration tests
        run: |
          # Add integration test commands here
          echo "Integration tests would run here"
      
      - name: Stop services
        if: always()
        run: |
          docker-compose -f infrastructure/docker/docker-compose.dev.yml down -v

  # Summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build, security, integration]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Integration: ${{ needs.integration.result }}"
