// Prisma schema for In My Head API Gateway
// Matches PostgreSQL database structure defined in SQLAlchemy models

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= User Model =============

model User {
  id                   String                @id @default(uuid()) @db.Uuid
  username             String                @unique @db.VarChar(50)
  email                String                @unique @db.VarChar(255)
  passwordHash         String                @map("password_hash") @db.VarChar(255)
  fullName             String?               @map("full_name") @db.VarChar(255)
  preferences          Json                  @default("{}")
  isVerified           Boolean               @default(false) @map("is_verified")
  isActive             Boolean               @default(true) @map("is_active")
  lastLogin            DateTime?             @map("last_login") @db.Timestamptz
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime              @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  collections          Collection[]
  documents            Document[]
  tags                 Tag[]
  annotations          Annotation[]
  conversations        Conversation[]
  queries              Query[]
  resources            Resource[]
  knowledgeGraphNodes  KnowledgeGraphNode[]
  knowledgeGraphEdges  KnowledgeGraphEdge[]
  processingJobs       ProcessingJob[]
  apiKeys              ApiKey[]

  @@map("users")
}

// ============= Collection Model =============

model Collection {
  id                  String       @id @default(uuid()) @db.Uuid
  userId              String       @map("user_id") @db.Uuid
  name                String       @db.VarChar(255)
  description         String?      @db.Text
  color               String       @db.VarChar(7)
  icon                String?      @db.VarChar(50)
  parentCollectionId  String?      @map("parent_collection_id") @db.Uuid
  isDefault           Boolean      @default(false) @map("is_default")
  documentCount       Int          @default(0) @map("document_count")
  totalSize           BigInt       @default(0) @map("total_size")
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentCollection    Collection?  @relation("CollectionHierarchy", fields: [parentCollectionId], references: [id], onDelete: Cascade)
  childCollections    Collection[] @relation("CollectionHierarchy")
  documents           Document[]
  resources           Resource[]

  @@index([userId])
  @@index([parentCollectionId])
  @@map("collections")
}

// ============= Document Model =============

model Document {
  id                String         @id @default(uuid()) @db.Uuid
  userId            String         @map("user_id") @db.Uuid
  collectionId      String         @map("collection_id") @db.Uuid
  title             String         @db.VarChar(512)
  filePath          String?        @map("file_path") @db.VarChar(1024)
  fileHash          String         @map("file_hash") @db.VarChar(64)
  fileSize          BigInt         @map("file_size")
  mimeType          String?        @map("mime_type") @db.VarChar(100)
  processingStatus  String         @default("pending") @map("processing_status") @db.VarChar(20)
  extractedText     String?        @map("extracted_text") @db.Text
  summary           String?        @db.Text
  keywords          String[]       @default([])
  entities          Json           @default("{}")
  topics            String[]       @default([])
  embeddingId       String?        @map("embedding_id") @db.VarChar(255)
  metadata          Json           @default("{}")
  createdAt         DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime       @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection        Collection     @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  tags              DocumentTag[]
  annotations       Annotation[]

  @@index([userId])
  @@index([collectionId])
  @@index([fileHash])
  @@index([processingStatus])
  @@map("documents")
}

// ============= Tag Model =============

model Tag {
  id        String        @id @default(uuid()) @db.Uuid
  userId    String        @map("user_id") @db.Uuid
  name      String        @db.VarChar(50)
  color     String        @db.VarChar(7)
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime      @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents DocumentTag[]

  @@unique([userId, name])
  @@index([userId])
  @@map("tags")
}

// ============= Document-Tag Association =============

model DocumentTag {
  documentId String   @map("document_id") @db.Uuid
  tagId      String   @map("tag_id") @db.Uuid
  
  // Relationships
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([documentId, tagId])
  @@index([documentId])
  @@index([tagId])
  @@map("document_tags")
}

// ============= Annotation Model =============

model Annotation {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  documentId     String    @map("document_id") @db.Uuid
  pageNumber     Int?      @map("page_number")
  startPosition  Int?      @map("start_position")
  endPosition    Int?      @map("end_position")
  content        String    @db.Text
  highlightColor String?   @map("highlight_color") @db.VarChar(7)
  note           String?   @db.Text
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  document       Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([documentId])
  @@map("annotations")
}

// ============= Conversation Model =============

model Conversation {
  id                 String    @id @default(uuid()) @db.Uuid
  userId             String    @map("user_id") @db.Uuid
  title              String    @db.VarChar(255)
  aiModel            String?   @map("ai_model") @db.VarChar(100)
  contextDocumentIds String[]  @default([]) @map("context_document_ids") @db.Uuid[]
  messageCount       Int       @default(0) @map("message_count")
  totalTokens        Int       @default(0) @map("total_tokens")
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages           Message[]

  @@index([userId])
  @@map("conversations")
}

// ============= Message Model =============

model Message {
  id                 String       @id @default(uuid()) @db.Uuid
  conversationId     String       @map("conversation_id") @db.Uuid
  role               String       @db.VarChar(20)
  content            String       @db.Text
  tokenCount         Int          @default(0) @map("token_count")
  citations          Json         @default("{}")
  citedDocumentIds   String[]     @default([]) @map("cited_document_ids") @db.Uuid[]
  createdAt          DateTime     @default(now()) @map("created_at") @db.Timestamptz
  
  // Relationships
  conversation       Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@map("messages")
}

// ============= Query Model =============

model Query {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  queryText       String   @map("query_text") @db.Text
  searchType      String   @map("search_type") @db.VarChar(20)
  filters         Json     @default("{}")
  resultCount     Int      @default(0) @map("result_count")
  executionTimeMs Int      @default(0) @map("execution_time_ms")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  // Relationships
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("queries")
}

// ============= Resource Model =============

model Resource {
  id             String      @id @default(uuid()) @db.Uuid
  userId         String      @map("user_id") @db.Uuid
  collectionId   String?     @map("collection_id") @db.Uuid
  url            String      @db.VarChar(2048)
  title          String?     @db.VarChar(512)
  status         String      @default("pending") @db.VarChar(20)
  content        String?     @db.Text
  metadata       Json        @default("{}")
  lastFetchedAt  DateTime?   @map("last_fetched_at") @db.Timestamptz
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime    @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection     Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([collectionId])
  @@index([status])
  @@map("resources")
}

// ============= Knowledge Graph Node Model =============

model KnowledgeGraphNode {
  id           String               @id @default(uuid()) @db.Uuid
  userId       String               @map("user_id") @db.Uuid
  entityName   String               @map("entity_name") @db.VarChar(255)
  entityType   String               @map("entity_type") @db.VarChar(100)
  properties   Json                 @default("{}")
  documentIds  String[]             @default([]) @map("document_ids") @db.Uuid[]
  embeddingId  String?              @map("embedding_id") @db.VarChar(255)
  createdAt    DateTime             @default(now()) @map("created_at") @db.Timestamptz
  
  // Relationships
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  outgoingEdges KnowledgeGraphEdge[] @relation("SourceNode")
  incomingEdges KnowledgeGraphEdge[] @relation("TargetNode")

  @@index([userId])
  @@index([entityType])
  @@map("knowledge_graph_nodes")
}

// ============= Knowledge Graph Edge Model =============

model KnowledgeGraphEdge {
  id               String             @id @default(uuid()) @db.Uuid
  userId           String             @map("user_id") @db.Uuid
  sourceNodeId     String             @map("source_node_id") @db.Uuid
  targetNodeId     String             @map("target_node_id") @db.Uuid
  relationshipType String             @map("relationship_type") @db.VarChar(100)
  strength         Float              @default(1.0)
  properties       Json               @default("{}")
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz
  
  // Relationships
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceNode       KnowledgeGraphNode @relation("SourceNode", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  targetNode       KnowledgeGraphNode @relation("TargetNode", fields: [targetNodeId], references: [id], onDelete: Cascade)

  @@unique([userId, sourceNodeId, targetNodeId, relationshipType])
  @@index([userId])
  @@index([sourceNodeId])
  @@index([targetNodeId])
  @@map("knowledge_graph_edges")
}

// ============= Processing Job Model =============

model ProcessingJob {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  jobType     String    @map("job_type") @db.VarChar(50)
  status      String    @default("queued") @db.VarChar(20)
  progress    Int       @default(0)
  parameters  Json      @default("{}")
  result      Json?
  errorMessage String?  @map("error_message") @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  startedAt   DateTime? @map("started_at") @db.Timestamptz
  completedAt DateTime? @map("completed_at") @db.Timestamptz
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("processing_jobs")
}

// ============= API Key Model =============

model ApiKey {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  provider     String    @db.VarChar(50)
  encryptedKey String    @map("encrypted_key") @db.VarChar(512)
  description  String?   @db.VarChar(255)
  lastUsedAt   DateTime? @map("last_used_at") @db.Timestamptz
  usageCount   Int       @default(0) @map("usage_count")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId])
  @@map("api_keys")
}

// ============= System Setting Model =============

model SystemSetting {
  id          String   @id @default(uuid()) @db.Uuid
  key         String   @unique @db.VarChar(100)
  value       Json
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@map("system_settings")
}
